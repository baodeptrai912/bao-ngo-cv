package com.example.baoNgoCv;

import com.example.baoNgoCv.service.EmailService;
import jakarta.mail.MessagingException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.InputStreamSource;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile; // Quan tr·ªçng cho file upload

import java.io.IOException;
import java.util.Map;

@RestController
@RequestMapping("/picon/mail")
@CrossOrigin(origins = "http://localhost:5174")
public class PiconService {

    @Autowired
    private EmailService emailService; // Gi·∫£ s·ª≠ b·∫°n ƒë√£ t√°ch EmailService th√†nh 2 ph∆∞∆°ng th·ª©c

    /**
     * Endpoint x·ª≠ l√Ω form LI√äN H·ªÜ (nh·∫≠n JSON)
     * URL: POST /picon/mail/contact
     */
    @PostMapping("/contact")
    public ResponseEntity<Map<String, String>> handleContactSubmission(
            @RequestBody Map<String, String> request) { // D√πng @RequestBody

        String name = request.get("name");
        String email = request.get("email");
        String message = request.get("message");

        System.out.println("üì¨ Received CONTACT request: " + request);

        // Validation cho contact
        if (name == null || name.isBlank() || email == null || email.isBlank() || message == null || message.isBlank()) {
            System.out.println("‚ö†Ô∏è Invalid contact data: " + request);
            return ResponseEntity.badRequest().body(Map.of("message", "Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß T√™n, Email v√† Tin nh·∫Øn."));
        }

        try {
            // G·ªçi ph∆∞∆°ng th·ª©c service d√†nh ri√™ng cho contact
            emailService.sendContactEmail(name, email, message);
            return ResponseEntity.ok(Map.of("message", "G·ª≠i li√™n h·ªá th√†nh c√¥ng!"));
        } catch (MessagingException e) {
            System.err.println("‚ùå Error sending contact email: " + e.getMessage());
            return ResponseEntity.internalServerError().body(Map.of("message", "L·ªói g·ª≠i email li√™n h·ªá."));
        }
    }

    /**
     * Endpoint x·ª≠ l√Ω form ·ª®NG TUY·ªÇN (nh·∫≠n multipart/form-data)
     * URL: POST /picon/mail/application
     */
    @PostMapping("/application")
    public ResponseEntity<Map<String, String>> handleApplicationSubmission(
            // D√πng @RequestPart cho t·ª´ng ph·∫ßn c·ªßa multipart request
            @RequestPart("name") String name,
            @RequestPart("email") String email,
            @RequestPart(value = "phone", required = false) String phone, // Optional
            @RequestPart(value = "message", required = false) String message, // Optional
            // Nh·∫≠n file CV, ƒë·∫∑t required=false n·∫øu CV kh√¥ng b·∫Øt bu·ªôc nh∆∞ y√™u c·∫ßu tr∆∞·ªõc
            @RequestPart(value = "cvFile", required = false) MultipartFile cvFile) {

        System.out.println("üì¨ Received APPLICATION request. Name: " + name + ", Email: " + email + ", CV: " + (cvFile != null && !cvFile.isEmpty() ? cvFile.getOriginalFilename() : "N/A"));

        if (name == null || name.isBlank() || email == null || email.isBlank()) {

            System.out.println("‚ö†Ô∏è Invalid application data (missing name or email).");
            return ResponseEntity.badRequest().body(Map.of("message", "Vui l√≤ng cung c·∫•p T√™n v√† Email."));
        }


        InputStreamSource cvAttachment = null;
        String cvFileName = null;

        // X·ª≠ l√Ω file n·∫øu n√≥ t·ªìn t·∫°i v√† kh√¥ng r·ªóng
        if (cvFile != null && !cvFile.isEmpty()) {
            try {
                cvAttachment = new ByteArrayResource(cvFile.getBytes());
                cvFileName = cvFile.getOriginalFilename();
                System.out.println("Received CV file: " + cvFileName + ", size: " + cvFile.getSize());
            } catch (IOException e) {
                System.err.println("‚ùå Error reading uploaded CV file: " + e.getMessage());
                return ResponseEntity.internalServerError().body(Map.of("message", "L·ªói x·ª≠ l√Ω file CV t·∫£i l√™n."));
            }
        }

        try {
            // G·ªçi ph∆∞∆°ng th·ª©c service d√†nh ri√™ng cho application
            emailService.sendApplicationEmail(name, email, phone, message, null);
            return ResponseEntity.ok(Map.of("message", "H·ªì s∆° ·ª©ng tuy·ªÉn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!"));
        } catch (MessagingException e) {
            System.err.println("‚ùå Error sending application email: " + e.getMessage());
            return ResponseEntity.internalServerError().body(Map.of("message", "L·ªói h·ªá th·ªëng khi g·ª≠i h·ªì s∆° ·ª©ng tuy·ªÉn."));
        } catch (Exception e) { // B·∫Øt c√°c l·ªói kh√°c c√≥ th·ªÉ x·∫£y ra
            System.err.println("‚ùå Unknown error processing application: " + e.getMessage());
            return ResponseEntity.internalServerError().body(Map.of("message", "L·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh x·ª≠ l√Ω."));
        }
    }
}